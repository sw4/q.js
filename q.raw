// Helpers
function format_percentage(value, decimal) {
    decimal=decimal||2;
    value = value*100;
    return value.toFixed(decimal);
}
var Array={
    max:function (array) {
        return Math.max.apply(Math, array);
    },
    min:function (array) {
        return Math.min.apply(Math, array);
    }
};

// Statistics

function statMean (series) {
    var sum = 0, 
        n = series.length;
        
    series.forEach(function(dataPoint){
        sum += parseFloat(dataPoint);
    });
    return sum / n;
}
/*
function statVar(series) {
    var n = series.length,
        mean = statMean(series),
        sum = 0;
    series.forEach(function(dataPoint){
        sum += Math.pow((parseFloat(dataPoint) - parseFloat(mean)), 2);
    });
    return sum / n;
}
*/
function statStdDev(series) {
    return Math.sqrt(statVar(series));
}


function statVar(series) {
    // calculates sample variance 
    var n = series.length,
        mean = statMean(series),
        sum = 0;
    series.forEach(function(dataPoint){
        sum += Math.pow((dataPoint - mean), 2);
    });
    // below to be debugged 
    return (n > 1)? (sum / (n - 1)) : sum;
}

function statHistVar(series, p) {
    var sample = series.slice(),
        n = sample.length;
        
    sample.sort();
    sample.reverse();
    
    p = p || 90;  
    p = (p > 1) ?  p * 0.01 :p;
    return sample[Math.ceil((n - 1) * p)];
}

function statRange(series) {
    // calculates range 
    return (Array.max(series) - Array.min(series));
}

function statSimpleRegression(x, y) {
    var n = Array.min([x.length, y.length]),
        mean_x = statMean(x),
        mean_y = statMean(y),
        SS_x = 0,
        SS_y = 0,
        SS_xy = 0,
        output={};
    for (var i = 0; i < n; i++) {
        SS_x += Math.pow((x[i] - mean_x), 2);
        SS_y += Math.pow((y[i] - mean_y), 2);
        SS_xy += (x[i] - mean_x) * (y[i] - mean_y);
    }    
    output.slope = (SS_xy / SS_x) || 0;
    output.intercept = (100 * (mean_y - output.slope * mean_x)).toFixed(3) || 0;
    output.error = (100 * (Math.sqrt((SS_y - output.slope * SS_xy) / (n - 2)))).toFixed(2);
    output.corrCoeff = SS_xy / Math.sqrt(SS_x * SS_y);
    output.coeffDetermination = Math.pow(output.corrCoeff, 2);
    output.covar = ((SS_xy / (n - 1)) * 100).toFixed(3);
    output.tStat = (output.corrCoeff / Math.sqrt((1 - output.coeffDetermination) / (n - 2))).toFixed(2);
    output.slope = output.slope.toFixed(3);
    output.corrCoeff = output.corrCoeff.toFixed(3);
    output.coeffDetermination = output.coeffDetermination.toFixed(2);
    return output;
}

function statSeries(series, base) {
    var output={
        value:[],
        positive:[],
        negative:[],
        cumulative:[]    
    };    
    base=base||100;
    output.cumulative.push(base);
    series.forEach(function(dataPoint){
        value = parseFloat(dataPoint);
        output.value.push(value);
        value >= 0 ?  output.positive.push(value): output.negative.push(value);        
        output.cumulative.push(output.cumulative[output.cumulative.length - 1] += output.cumulative[output.cumulative.length - 1] * value);
    });
    output.cumulative.shift();
    return output;
}


// Compile

function dataCompile(series, benchmark, rfr, annInterval) {

    var sample = series.slice(),
        output={};
    rfr=rfr||0.4;
    annInterval=annInterval||12; // interval to annualise data, 12 = 12 data points = 1 year of data

    output.series= statSeries(series);
    output.regression= statSimpleRegression(series, benchmark);
    output.count=series.length;        
    
    output.stdDev = statStdDev(series);
    
    output.stdDevPositive = statStdDev(statSeries(series).positive);
    output.stdDevNegative = statStdDev(statSeries(series).negative);

    output.annStdDev = output.stdDev * Math.sqrt(annInterval);
    output.annStdDevPositive = output.stdDevPositive * Math.sqrt(annInterval);
    output.annStdDevNegative = output.stdDevNegative * Math.sqrt(annInterval);
    output.range = statRange(series);
    
    output.histVar95 = statHistVar(series, 95);
    output.max = Array.max(series);
    output.min = Array.min(series);
    output.posCount = statSeries(series).positive.length;
    output.negCount = statSeries(series).negative.length;
    output.negMean = statMean(statSeries(series).negative);        
    output.negPercentage = output.negCount / output.count;
    
    output.posMean = statMean(statSeries(series).positive);
    output.posPercentage = output.posCount / output.count;
    output.ttlReturn = (statSeries(series).cumulative[statSeries(series).cumulative.length - 1] - 100) / 100;
    output.annCumlReturn = Math.pow(1 + output.ttlReturn, 1 / (series.count / annInterval)) - 1;
    output.compoundRtn = Math.pow((1 + output.ttlReturn), (1 / series.count)) - 1;
    output.annCompoundRtn = format_percentage(output.compoundRtn * Math.sqrt(annInterval));

    output.sharpe = ((output.annCumlReturn - (Math.pow(1 + rfr, 12) - 1)) / output.annStdDev).toFixed(2);
    output.sortino = ((output.annCumlReturn - (Math.pow(1 + rfr, 12) - 1)) / output.annStdDevNegative).toFixed(2);

    output.jensen = (parseFloat(output.annCumlReturn / 100) - (parseFloat((Math.pow(1 + rfr, annInterval) - 1) + output.regression.slope) * parseFloat(output.annCumlReturn - (Math.pow(1 + rfr, annInterval) - 1)))).toFixed(3);
    
    return output;
}
